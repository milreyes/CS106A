/*
 * File: HangmanCanvas.java
 * ------------------------
 * This file keeps track of the Hangman display.
 */

import acm.graphics.*;
import acm.util.* ; 
public class HangmanCanvas extends GCanvas {

/** Resets the display so that only the scaffold appears */
	public void reset() {
		removeAll() ;
		drawScaffold() ; //This method draws the scaffold. 
	}

/**
 * Updates the word on the screen to correspond to the current
 * state of the game.  The argument string shows what letters have
 * been guessed so far; unguessed letters are indicated by hyphens.
 */
	public void displayWord(String word) {
		
		int centerX = getWidth() / 2 ;
		
		GLabel display = new GLabel (word) ; 
		display . setFont( "ComicSans-24" );
		remove (display) ;
		add (display, centerX - display . getWidth()/2 , getHeight() - WORD_DISPLAY_OFFSET ) ;
		
	}

/**
 * Updates the display to correspond to an incorrect guess by the
 * user.  Calling this method causes the next body part to appear
 * on the scaffold and adds the letter to the list of incorrect
 * guesses that appears at the bottom of the window.
 */
	public void noteIncorrectGuess( char letter , int guesses ) {
	
		addLetterToDisplay (letter) ; //This method adds the letter to the display.
		
		if(guesses == 7) drawHead() ; 
		if(guesses == 6) drawBody() ;
		if(guesses == 5) drawLArm() ;
		if(guesses == 4) drawRArm() ;
		if(guesses == 3) drawLLeg() ;
		if(guesses == 2) drawRLeg() ;
		if(guesses == 1) drawLFoot() ;
		if(guesses == 0) drawRFoot () ;
		
	}

	/*This method draws the scaffold.
	 * */
	private void drawScaffold() {
		
		int centerX = getWidth() / 2 ;
		int centerY = getHeight() / 2 ;
		
		GLine column = new GLine (centerX - BEAM_LENGTH , centerY - BEAM_OFFSET_FROM_CENTER , centerX - BEAM_LENGTH , centerY - BEAM_OFFSET_FROM_CENTER + SCAFFOLD_HEIGHT ) ;
		GLine beam = new GLine (centerX - BEAM_LENGTH , centerY - BEAM_OFFSET_FROM_CENTER , centerX , centerY - BEAM_OFFSET_FROM_CENTER ) ;
		GLine rope = new GLine (centerX , centerY - BEAM_OFFSET_FROM_CENTER , centerX , centerY - BEAM_OFFSET_FROM_CENTER + ROPE_LENGTH ) ;
		add (column) ; 
		add (beam) ; 
		add (rope) ;
	}
	
	private void drawHead() {
			
		int centerX = getWidth() / 2 ;
		int centerY = getHeight() / 2 ;
		
		GOval head = new GOval (centerX - HEAD_RADIUS , centerY - BEAM_OFFSET_FROM_CENTER + ROPE_LENGTH , HEAD_RADIUS * 2 , HEAD_RADIUS * 2 ) ; 
		//drawFace() ; 
		add (head) ;
		
	}

	private void drawBody() {
		
		int centerX = getWidth() / 2 ;
		int centerY = getHeight() / 2 ;
		
		GLine body = new GLine (centerX , centerY - BEAM_OFFSET_FROM_CENTER + ROPE_LENGTH + HEAD_RADIUS * 2 , centerX , centerY - BEAM_OFFSET_FROM_CENTER 
								+ ROPE_LENGTH + HEAD_RADIUS * 2 + BODY_LENGTH ) ;
		add (body) ;
	
	}
	
	private void drawLArm() {
		
		int centerX = getWidth() / 2 ;
		int centerY = getHeight() / 2 ;
		
		GLine upperLarm = new GLine (centerX - UPPER_ARM_LENGTH , centerY - BEAM_OFFSET_FROM_CENTER + ROPE_LENGTH + HEAD_RADIUS * 2 + ARM_OFFSET_FROM_HEAD , centerX , 
									 centerY - BEAM_OFFSET_FROM_CENTER + ROPE_LENGTH + HEAD_RADIUS * 2 + ARM_OFFSET_FROM_HEAD );
		GLine lowerLarm = new GLine (centerX - UPPER_ARM_LENGTH , centerY - BEAM_OFFSET_FROM_CENTER + ROPE_LENGTH + HEAD_RADIUS * 2 + ARM_OFFSET_FROM_HEAD , 	
									 centerX - UPPER_ARM_LENGTH , centerY - BEAM_OFFSET_FROM_CENTER + ROPE_LENGTH + HEAD_RADIUS * 2 + ARM_OFFSET_FROM_HEAD + 
									 LOWER_ARM_LENGTH) ; 
		add (upperLarm) ;
		add (lowerLarm) ;
		
	}
	
	private void drawRArm() {
		
		int centerX = getWidth() / 2 ;
		int centerY = getHeight() / 2 ;
		
		GLine upperRarm = new GLine (centerX + UPPER_ARM_LENGTH , centerY - BEAM_OFFSET_FROM_CENTER + ROPE_LENGTH + HEAD_RADIUS * 2 + ARM_OFFSET_FROM_HEAD , centerX , 
									 centerY - BEAM_OFFSET_FROM_CENTER + ROPE_LENGTH + HEAD_RADIUS * 2 + ARM_OFFSET_FROM_HEAD );
		GLine lowerRarm = new GLine (centerX + UPPER_ARM_LENGTH , centerY - BEAM_OFFSET_FROM_CENTER + ROPE_LENGTH + HEAD_RADIUS * 2 + ARM_OFFSET_FROM_HEAD , 	
									 centerX + UPPER_ARM_LENGTH , centerY - BEAM_OFFSET_FROM_CENTER + ROPE_LENGTH + HEAD_RADIUS * 2 + ARM_OFFSET_FROM_HEAD + 
									 LOWER_ARM_LENGTH) ; 
		add (upperRarm) ;
		add (lowerRarm) ;
		
	}
	
	private void drawLLeg() {
		
		int centerX = getWidth() / 2 ;
		int centerY = getHeight() / 2 ;
		
		GLine hip = new GLine( centerX - HIP_WIDTH , centerY - BEAM_OFFSET_FROM_CENTER + ROPE_LENGTH + HEAD_RADIUS * 2 + BODY_LENGTH , 
							   centerX , centerY - BEAM_OFFSET_FROM_CENTER + ROPE_LENGTH + HEAD_RADIUS * 2 +BODY_LENGTH) ;
		GLine leg = new GLine (centerX - HIP_WIDTH , centerY - BEAM_OFFSET_FROM_CENTER + ROPE_LENGTH + HEAD_RADIUS * 2 + BODY_LENGTH , 
							   centerX - HIP_WIDTH , centerY - BEAM_OFFSET_FROM_CENTER + ROPE_LENGTH + HEAD_RADIUS * 2 + BODY_LENGTH + LEG_LENGTH ) ;
		
		add (hip) ; 
		add (leg) ;
		
	}
	
	private void drawRLeg() {
		
		int centerX = getWidth() / 2 ;
		int centerY = getHeight() / 2 ;
		
		GLine hip = new GLine( centerX + HIP_WIDTH , centerY - BEAM_OFFSET_FROM_CENTER + ROPE_LENGTH + HEAD_RADIUS * 2 + BODY_LENGTH , 
							   centerX , centerY - BEAM_OFFSET_FROM_CENTER + ROPE_LENGTH + HEAD_RADIUS * 2 +BODY_LENGTH) ;
		GLine leg = new GLine (centerX + HIP_WIDTH , centerY - BEAM_OFFSET_FROM_CENTER + ROPE_LENGTH + HEAD_RADIUS * 2 + BODY_LENGTH , 
							   centerX + HIP_WIDTH , centerY - BEAM_OFFSET_FROM_CENTER + ROPE_LENGTH + HEAD_RADIUS * 2 + BODY_LENGTH + LEG_LENGTH ) ;
		
		add (hip) ; 
		add (leg) ;
		
	}
	
	private void drawLFoot () {
		
		int centerX = getWidth() / 2 ;
		int centerY = getHeight() / 2 ;
		
		GLine foot = new GLine ( centerX - HIP_WIDTH - FOOT_LENGTH , centerY - BEAM_OFFSET_FROM_CENTER + ROPE_LENGTH + HEAD_RADIUS * 2 + BODY_LENGTH + LEG_LENGTH ,
								 centerX - HIP_WIDTH , centerY - BEAM_OFFSET_FROM_CENTER + ROPE_LENGTH + HEAD_RADIUS * 2 + BODY_LENGTH + LEG_LENGTH) ;
		
		add(foot) ; 
		
	}
	
	private void drawRFoot () {
		
		int centerX = getWidth() / 2 ;
		int centerY = getHeight() / 2 ;
		
		GLine foot = new GLine ( centerX + HIP_WIDTH + FOOT_LENGTH , centerY - BEAM_OFFSET_FROM_CENTER + ROPE_LENGTH + HEAD_RADIUS * 2 + BODY_LENGTH + LEG_LENGTH ,
								 centerX + HIP_WIDTH , centerY - BEAM_OFFSET_FROM_CENTER + ROPE_LENGTH + HEAD_RADIUS * 2 + BODY_LENGTH + LEG_LENGTH) ;
		
		add(foot) ; 
		
	}
	
	private void addLetterToDisplay(char letter){
		
		int centerX = getWidth() / 2 ;
		
		wrongGuesses += letter ; //Adds the new letter to wrong guesses.
		
		GLabel incorrectGuesses = new GLabel ("Incorrect guesses: ");
		remove(incorrectGuesses);
		add (incorrectGuesses, centerX - incorrectGuesses . getWidth() / 2 , getHeight() - INC_GUESSES_OFFSET ) ;
		
		GLabel wrongGuessesLabel = new GLabel (wrongGuesses) ;
		remove(wrongGuessesLabel);
		add(wrongGuessesLabel, centerX - wrongGuessesLabel . getWidth() / 2 , getHeight() - WRONG_GUESSES_OFFSET ) ;
	}
	
/* Constants for the simple version of the picture (in pixels) */
	private String wrongGuesses ="" ; 
	private static final int SCAFFOLD_HEIGHT = 360;
	private static final int BEAM_LENGTH = 144;
	private static final int BEAM_OFFSET_FROM_CENTER = 100 ; //This is the offset of the beam from the center of the screen, to leave enough room for the labels underneath.
	private static final int ROPE_LENGTH = 18;
	private static final int HEAD_RADIUS = 36;
	private static final int BODY_LENGTH = 144;
	private static final int ARM_OFFSET_FROM_HEAD = 28;
	private static final int UPPER_ARM_LENGTH = 72;
	private static final int LOWER_ARM_LENGTH = 44;
	private static final int HIP_WIDTH = 36;
	private static final int LEG_LENGTH = 108;
	private static final int FOOT_LENGTH = 28;
	private static final int WORD_DISPLAY_OFFSET = 250 ; 
	private static final int INC_GUESSES_OFFSET = 200 ; 
	private static final int WRONG_GUESSES_OFFSET = 180; 
}
